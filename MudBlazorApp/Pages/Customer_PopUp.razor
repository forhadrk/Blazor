@namespace MudBlazorApp.Pages
@using MudBlazorApp.Data
@inject ICustomerService customerService
@inject MudBlazor.ISnackbar snackbar
@inject IDialogService DialogService

<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    <span class="oi oi-plus-circle"></span> Add New Customer
</MudButton>

<MudTable Elevation="10" Items="GetAllCustomer()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer" Hover="@hover" Dense="@dense">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchstring" Placeholder="Search Customer..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)" InitialDirection="SortDirection.Ascending">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=> Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=> Delete(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50,100}" />
    </PagerContent>
</MudTable>
<MudDialog @bind-IsVisible="visible">
    <DialogContent>
        <MudCard Elevation="10">
            <MudGrid>
                <MudItem xs="12">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                Add / Edit Customer
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="customer.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="customer.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                        <MudTextField @bind-Value="customer.PhoneNumber" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                        <br />
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@Save">
                            Save Customer
                        </MudButton>
                    </MudCardContent>
                </MudItem>
            </MudGrid>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private Customer customer = new Customer();
    private List<Customer> customers = new List<Customer>();

    private bool hover = true;
    private bool dense = true;
    private bool visible;

    private string searchstring = "";

    void Submit() => visible = false;
    void Cancel() => visible = false;
    private void OpenDialog() => visible = true;

    protected override async Task OnInitializedAsync()
    {
        GetAllCustomer();
    }

    private void Save()
    {
        customerService.SaveCustomer(customer);

        customer = new Customer();
        visible = false;
        GetAllCustomer();
    }

    private List<Customer> GetAllCustomer()
    {
        customers = customerService.GetCustomers();
        return customers;
    }

    private bool Search(Customer customer)
    {
        if (customer.FirstName != null && customer.LastName != null && customer.PhoneNumber != null &&
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)) ||
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)) ||
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        return false;
    }

    private void Edit(int Id)
    {
        customer = customers.FirstOrDefault(c => c.Id == Id);
        visible = true;
    }

    private void Delete(int Id)
    {
        customerService.DeleteCustomer(Id);
        GetAllCustomer();
    }
}
